name: Daily PR from develop to master

on:
  schedule:
    # 平日（月-金）の深夜0:00（日本時間）に実行
    # UTCでは前日の15:00（日本時間との差は+9時間）
    # 曜日は1-5で月-金を表す
    - cron: '0 15 * * 1-5'
  
  # 手動実行も可能に
  workflow_dispatch:

# ワークフローレベルで環境変数を定義
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-pull-request:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for differences between develop and master
        id: check_diff
        run: |
          # ブランチの差分を確認
          if [ $(git rev-list --count origin/master..origin/develop) -gt 0 ]; then
            echo "HAS_DIFF=true" >> $GITHUB_ENV
          else
            echo "HAS_DIFF=false" >> $GITHUB_ENV
          fi
      
      - name: Get included PRs
        id: get_prs
        if: env.HAS_DIFF == 'true'
        run: |
          # developに取り込まれたPRの一覧を取得
          # コミットメッセージ(件名)にPR番号があるものを抽出
          PR_LIST=$(git log origin/master..origin/develop --pretty=format:"%s" | grep -o "#[0-9]\+" | sort -u)
          
          # PR情報を取得してマークダウン形式でリスト化
          PR_LIST_MD=""
          for PR_NUM in $PR_LIST; do
            PR_LIST_MD="$PR_LIST_MD\n- $PR_NUM"
          done
          
          # 環境変数に設定（複数行の場合はデリミタの設定が必要）
          {
            echo "PR_LIST_MD<<EOF"
            echo -e "$PR_LIST_MD"
            echo "EOF"
          } >> $GITHUB_ENV
      
      - name: Check for existing PR
        id: check_pr
        if: env.HAS_DIFF == 'true'
        run: |
          EXISTING_PR=$(gh pr list --base master --head develop --json number --jq '.[0].number')
          if [ -n "$EXISTING_PR" ]; then
            echo "Found existing PR: $EXISTING_PR"
            echo "EXISTING_PR=$EXISTING_PR" >> $GITHUB_ENV
            echo "PR_EXISTS=true" >> $GITHUB_ENV
          else
            echo "No existing PR found"
            echo "PR_EXISTS=false" >> $GITHUB_ENV
          fi
      
      - name: Update existing PR
        if: env.HAS_DIFF == 'true' && env.PR_EXISTS == 'true'
        run: |
          # PRの本文を生成
          PR_BODY_FILE="PR_BODY.md"
          PR_LIST_FILE="PR_LIST.md" # PRリスト用の一時ファイル名
          CREATED_AT=$(date +"%Y-%m-%d %H:%M:%S")

          # PRリストの内容を一時ファイルに書き出す
          # env.PR_LIST_MDを直接読込まないのは後続処理のsedによる置換処理で改行コードによりエラーになるため
          echo -e "${{ env.PR_LIST_MD }}" > $PR_LIST_FILE

          # テンプレートを読み込み、sedで置換と挿入を行う (1行に修正)
          sed -e "s|{{CREATED_AT}}|$CREATED_AT|" -e "/{{PR_LIST}}/r $PR_LIST_FILE" -e "/{{PR_LIST}}/d" .github/workflows/RELEASE_WORKFLOW_TEMPLATE.md > $PR_BODY_FILE

          # PRを更新
          gh pr edit ${{ env.EXISTING_PR }} --body-file $PR_BODY_FILE

          # コメントも追加
          gh pr comment ${{ env.EXISTING_PR }} --body "$(date +"%Y-%m-%d %H:%M:%S") に新たな変更が検出されたので、更新しました。"

          # 一時ファイルを削除
          rm $PR_BODY_FILE $PR_LIST_FILE
      
      - name: Create new Pull Request
        if: env.HAS_DIFF == 'true' && env.PR_EXISTS == 'false'
        run: |
          # PRの本文を作成 (テンプレートを使用)
          PR_BODY_FILE="PR_BODY.md"
          PR_LIST_FILE="PR_LIST.md" # PRリスト用の一時ファイル名
          CREATED_AT=$(date +"%Y-%m-%d %H:%M:%S")

          # PRリストの内容を一時ファイルに書き出す
          # env.PR_LIST_MDを直接読込まないのは後続処理のsedによる置換処理で改行コードによりエラーになるため
          echo -e "${{ env.PR_LIST_MD }}" > $PR_LIST_FILE

          # テンプレートを読み込み、sedで置換と挿入を行う
          sed -e "s|{{CREATED_AT}}|$CREATED_AT|" -e "/{{PR_LIST}}/r $PR_LIST_FILE" -e "/{{PR_LIST}}/d" .github/workflows/RELEASE_WORKFLOW_TEMPLATE.md > $PR_BODY_FILE

          # PRを作成
          gh pr create \\
            --title "【自動生成】developからmasterへのマージ" \\
            --body-file $PR_BODY_FILE \\
            --base master \\
            --head develop

          # 一時ファイルを削除
          rm $PR_BODY_FILE $PR_LIST_FILE 